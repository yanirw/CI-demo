name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

env:
  JF_URL: ${{ secrets.JF_URL }}
  JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
  IMAGE_NAME: spring-petclinic

jobs:
  # Job 1: Build
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate image tag
      id: image-tag
      run: |
        TAG=${GITHUB_SHA::8}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated image tag: $TAG"

  # Job 2: Container Build, Sign & Push
  container-build:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ env.JF_URL }}
        JF_ACCESS_TOKEN: ${{ env.JF_ACCESS_TOKEN }}

    - name: Build and push Docker Image
      working-directory: app/spring-petclinic
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        FULL_IMAGE: ${{ env.JF_URL }}/petclinic-docker/${{ env.IMAGE_NAME }}
      run: |
        jf docker build -t $FULL_IMAGE:$IMAGE_TAG .
        jf docker push $FULL_IMAGE:$IMAGE_TAG
        docker tag $FULL_IMAGE:$IMAGE_TAG $FULL_IMAGE:latest
        jf docker push $FULL_IMAGE:latest

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign Docker image (Keyless)
      run: |
        cosign sign --yes ${{ env.JF_URL }}/petclinic-docker/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}

    - name: Publish Build Info to JFrog
      env:
        JFROG_CLI_BUILD_NAME: petclinic-build
        JFROG_CLI_BUILD_NUMBER: ${{ needs.build.outputs.image-tag }}
      run: |
        jf rt build-collect-env
        jf rt build-add-git
        jf rt build-publish

    - name: Comment container build results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Docker image built and published successfully.\n\n**Image:** `${{ env.JF_URL }}/petclinic-docker/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}`'
          })

  # Job 3: XRay Docker Image Scanning
  xray-image-scan:
    runs-on: ubuntu-latest
    needs: [container-build, build]
    steps:
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ env.JF_URL }}
        JF_ACCESS_TOKEN: ${{ env.JF_ACCESS_TOKEN }}

    - name: XRay Docker Image Scan
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        FULL_IMAGE: ${{ env.JF_URL }}/petclinic-docker/${{ env.IMAGE_NAME }}
        JFROG_CLI_BUILD_NAME: petclinic-build
        JFROG_CLI_BUILD_NUMBER: ${{ needs.build.outputs.image-tag }}
      run: |
        echo "Scanning Docker image for vulnerabilities..."
        # Scan the specific Docker image
        jf docker scan $FULL_IMAGE:$IMAGE_TAG
        
        # Build scan for policy enforcement with output file
        jf build-scan $JFROG_CLI_BUILD_NAME $JFROG_CLI_BUILD_NUMBER --format=json --output-file=image-scan-results.json

    - name: Upload XRay scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: xray-image-scan-results
        path: image-scan-results.json

    - name: Comment XRay scan results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'XRay Docker image security scan completed. Check JFrog XRay dashboard for detailed vulnerability analysis of the container image.'
          }) 