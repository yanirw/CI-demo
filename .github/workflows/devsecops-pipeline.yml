name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

env:
  JF_URL: ${{ secrets.JF_URL }}
  JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
  REGISTRY_URL: ${{ secrets.JF_URL }}/artifactory/petclinic-docker
  IMAGE_NAME: spring-petclinic

jobs:
  # Job 1: JFrog Build and Dependency Scanning
  jfrog-build-scan:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Generate image tag
      id: image-tag
      run: |
        TAG=${GITHUB_SHA::8}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated image tag: $TAG"

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4

    - name: Configure JFrog CLI for Maven
      run: |
        jf mvn-config --server-id-resolve petclinic-maven --server-id-deploy petclinic-maven --repo-resolve-releases petclinic-maven --repo-resolve-snapshots petclinic-maven --repo-deploy-releases petclinic-maven-local --repo-deploy-snapshots petclinic-maven-local

    - name: Build with JFrog and XRay Dependency Scanning
      working-directory: app/spring-petclinic
      run: |
        # Build application using JFrog Artifactory
        jf mvn clean package -DskipTests -B
        
        # Scan dependencies for vulnerabilities
        echo "Running JFrog XRay dependency scan..."
        jf audit --mvn --format=json --output-file=xray-dependency-scan.json
        
        # Collect build information
        jf rt build-collect-env
        jf rt build-add-git

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: xray-dependency-scan
        path: app/spring-petclinic/xray-dependency-scan.json

    - name: Comment JFrog scan results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '**JFrog XRay Dependency Scan Completed**\n\nDependencies have been scanned for vulnerabilities and build artifacts are ready for containerization. Check the XRay dashboard for detailed results.'
          })

  # Job 2: Container Build, Sign & Push
  container-build:
    runs-on: ubuntu-latest
    needs: [jfrog-build-scan]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to JFrog Docker Registry
      run: |
        echo ${{ secrets.JF_ACCESS_TOKEN }} | docker login ${{ env.REGISTRY_URL }} -u admin --password-stdin

    - name: Build Docker image
      working-directory: app/spring-petclinic
      run: |
        IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ needs.jfrog-build-scan.outputs.image-tag }}"
        docker build -t $IMAGE_TAG .
        docker tag $IMAGE_TAG ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign Docker image (Keyless)
      run: |
        # Keyless signing using GitHub OIDC
        cosign sign --yes $IMAGE_TAG

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4

    - name: Push to JFrog Artifactory
      run: |
        jf docker push $IMAGE_TAG --build-name=petclinic-build --build-number=${{ needs.jfrog-build-scan.outputs.image-tag }}
        jf docker push ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest --build-name=petclinic-build --build-number=${{ needs.jfrog-build-scan.outputs.image-tag }}

    - name: Publish Build Info to JFrog
      run: |
        jf rt build-publish petclinic-build ${{ needs.jfrog-build-scan.outputs.image-tag }}

    - name: Comment container build results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '**Container Build Completed**\n\nDocker image built with security hardening, signed with Cosign, and published to JFrog Artifactory.\n\nImage tag: `${{ needs.jfrog-build-scan.outputs.image-tag }}`'
          })

  # Job 3: Final XRay Policy Enforcement & SBOM
  xray-policy-enforcement:
    runs-on: ubuntu-latest
    needs: [container-build, jfrog-build-scan]
    steps:
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4

    - name: XRay Build Scan and Policy Enforcement
      run: |
        echo "Running final XRay build scan and policy enforcement..."
        # Build scan with policy enforcement
        jf build-scan petclinic-build ${{ needs.jfrog-build-scan.outputs.image-tag }} --format=json --output-file=xray-build-scan.json
        
        # Generate Software Bill of Materials
        jf build-scan petclinic-build ${{ needs.jfrog-build-scan.outputs.image-tag }} --format=sarif --output-file=sbom.sarif
        
        echo "XRay scanning and SBOM generation completed"

    - name: Upload Build Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: xray-build-scan
        path: xray-build-scan.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: software-bill-of-materials
        path: sbom.sarif

    - name: Comment final security results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '**DevSecOps Pipeline Complete**\n\n**Security Coverage:**\n- GitHub Built-in: Secret scanning, CodeQL SAST, Dependabot alerts\n- JFrog XRay: Dependency scanning and policy enforcement\n- Container Security: Image signing with Cosign and secure registry\n- Traceability: Build info and SBOM generated\n\n**Artifacts:** Scan results and SBOM are available for download from the Actions artifacts.\n\nBuild is ready for deployment.'
          }) 