name: DevSecOps CI Pipeline

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches: [main]
    paths: [ 'app/**' ]

permissions:
  contents: read
  security-events: write


env:
  JF_URL: ${{ secrets.JF_URL }}
  JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
  IMAGE_NAME: spring-petclinic
  BUILD_NAME: petclinic-build

jobs:
  build:
    if: github.event.pull_request.merged == true
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      docker-registry: ${{ steps.docker-registry.outputs.registry }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate image tag
      id: image-tag
      run: |
        TAG=${GITHUB_SHA::8}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated image tag: $TAG"

    - name: Parse Docker registry from JF_URL
      id: docker-registry
      run: |
        DOCKER_REGISTRY=$(echo "${{ env.JF_URL }}" | sed 's|https://||')
        echo "registry=$DOCKER_REGISTRY" >> $GITHUB_OUTPUT
        echo "Docker registry: $DOCKER_REGISTRY"

  container-build:
    if: github.event.pull_request.merged == true
    name: Container Build & Push
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ env.JF_URL }}
        JF_ACCESS_TOKEN: ${{ env.JF_ACCESS_TOKEN }}

    - name: Scan local dependencies before build
      working-directory: app/spring-petclinic
      run: |
        echo "Scanning local project dependencies..."
        jf audit --fail=true --min-severity=High

    - name: Build and push Docker image
      working-directory: app/spring-petclinic
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        DOCKER_REGISTRY: ${{ needs.build.outputs.docker-registry }}
      run: |
        FULL_IMAGE="$DOCKER_REGISTRY/petclinic-docker/${{ env.IMAGE_NAME }}"
        echo "Building image: $FULL_IMAGE:$IMAGE_TAG"
        jf docker build -t $FULL_IMAGE:$IMAGE_TAG .
        jf docker push $FULL_IMAGE:$IMAGE_TAG

    - name: Publish build info to JFrog
      env:
        JFROG_CLI_BUILD_NAME: ${{ env.BUILD_NAME }}
        JFROG_CLI_BUILD_NUMBER: ${{ needs.build.outputs.image-tag }}
      run: |
        jf rt build-collect-env
        jf rt build-add-git
        jf rt build-publish

  security-scan:
    if: github.event.pull_request.merged == true
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [build, container-build]
    steps:
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ env.JF_URL }}
        JF_ACCESS_TOKEN: ${{ env.JF_ACCESS_TOKEN }}

    - name: Wait for XRay indexing
      run: |
        echo "Waiting for XRay"
        sleep 30

    - name: Audit build against XRay policies (fail on high vulns)
      env:
        JFROG_CLI_BUILD_NAME: ${{ env.BUILD_NAME }}
        JFROG_CLI_BUILD_NUMBER: ${{ needs.build.outputs.image-tag }}
      run: |
        echo "Auditing build against XRay security policies..."
        jf build-scan $JFROG_CLI_BUILD_NAME $JFROG_CLI_BUILD_NUMBER
        echo "Build passed XRay security policy audit"

    - name: Retrieve XRay scan results
      env:
        JFROG_CLI_BUILD_NAME: ${{ env.BUILD_NAME }}
        JFROG_CLI_BUILD_NUMBER: ${{ needs.build.outputs.image-tag }}
      run: |
        echo "Retrieving XRay scan results..."
        jf build-scan $JFROG_CLI_BUILD_NAME $JFROG_CLI_BUILD_NUMBER --format=json --output-file=xray-scan-results.json || \
        echo "{\"status\":\"scanned\",\"note\":\"Check JFrog XRay dashboard for full results\"}" > xray-scan-results.json

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: xray-scan-results
        path: xray-scan-results.json
